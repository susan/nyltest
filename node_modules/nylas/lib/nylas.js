"use strict";

var _request = _interopRequireDefault(require("request"));

var _nylasConnection = _interopRequireDefault(require("./nylas-connection"));

var _managementAccount = _interopRequireDefault(require("./models/management-account"));

var _account = _interopRequireDefault(require("./models/account"));

var _restfulModelCollection = _interopRequireDefault(require("./models/restful-model-collection"));

var _managementModelCollection = _interopRequireDefault(require("./models/management-model-collection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Nylas =
/*#__PURE__*/
function () {
  function Nylas() {
    _classCallCheck(this, Nylas);

    this.appId = null;
    this.appSecret = null;
  }

  _createClass(Nylas, null, [{
    key: "config",
    value: function config(_ref) {
      var appId = _ref.appId,
          appSecret = _ref.appSecret,
          apiServer = _ref.apiServer;

      if (apiServer && apiServer.indexOf('://') === -1) {
        throw new Error('Please specify a fully qualified URL for the API Server.');
      }

      if (appId) {
        this.appId = appId;
      }

      if (appSecret) {
        this.appSecret = appSecret;
      }

      if (apiServer) {
        this.apiServer = apiServer;
      }

      var conn;

      if (this.hostedAPI()) {
        conn = new _nylasConnection.default(this.appSecret, {
          clientId: this.appId
        });
        this.accounts = new _managementModelCollection.default(_managementAccount.default, conn, this.appId);
      } else {
        conn = new _nylasConnection.default(this.appSecret, {
          clientId: this.appId
        });
        this.accounts = new _restfulModelCollection.default(_account.default, conn, this.appId);
      }

      return this;
    }
  }, {
    key: "hostedAPI",
    value: function hostedAPI() {
      return this.appId != null && this.appSecret != null;
    }
  }, {
    key: "with",
    value: function _with(accessToken) {
      if (!accessToken) {
        throw new Error('This function requires an access token');
      }

      return new _nylasConnection.default(accessToken, {
        clientId: this.appId
      });
    }
  }, {
    key: "exchangeCodeForToken",
    value: function exchangeCodeForToken(code, callback) {
      var _this = this;

      if (!this.appId || !this.appSecret) {
        throw new Error('exchangeCodeForToken() cannot be called until you provide an appId and secret via config()');
      }

      if (!code) {
        throw new Error('exchangeCodeForToken() must be called with a code');
      }

      return new Promise(function (resolve, reject) {
        var options = {
          method: 'GET',
          json: true,
          url: "".concat(_this.apiServer, "/oauth/token"),
          qs: {
            client_id: _this.appId,
            client_secret: _this.appSecret,
            grant_type: 'authorization_code',
            code: code
          }
        };
        return (0, _request.default)(options, function (error, response, body) {
          if (error) {
            reject(error);

            if (callback) {
              return callback(error);
            }
          } else {
            resolve(body['access_token']);

            if (callback) {
              return callback(null, body['access_token']);
            }
          }
        });
      });
    }
  }, {
    key: "urlForAuthentication",
    value: function urlForAuthentication() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!this.appId) {
        throw new Error('urlForAuthentication() cannot be called until you provide an appId via config()');
      }

      if (!options.redirectURI) {
        throw new Error('urlForAuthentication() requires options.redirectURI');
      }

      if (!options.loginHint) {
        options.loginHint = '';
      }

      var url = "".concat(this.apiServer, "/oauth/authorize?client_id=").concat(this.appId, "&response_type=code&login_hint=").concat(options.loginHint, "&redirect_uri=").concat(options.redirectURI);

      if (options.state != null) {
        url += "&state=".concat(options.state);
      }

      if (options.scopes != null) {
        url += "&scopes=".concat(options.scopes.join(','));
      }

      return url;
    }
  }]);

  return Nylas;
}();

Nylas.apiServer = 'https://api.nylas.com'; // We keep the old `module.exports` syntax for now to ensure that people using
// `require` don't have to use `.default` to use this package

module.exports = Nylas;