"use strict";

var _clone = _interopRequireDefault(require("lodash/clone"));

var _request2 = _interopRequireDefault(require("request"));

var _restfulModel = _interopRequireDefault(require("./models/restful-model"));

var _restfulModelCollection = _interopRequireDefault(require("./models/restful-model-collection"));

var _restfulModelInstance = _interopRequireDefault(require("./models/restful-model-instance"));

var _account = _interopRequireDefault(require("./models/account"));

var _managementAccount = _interopRequireDefault(require("./models/management-account"));

var _managementModelCollection = _interopRequireDefault(require("./models/management-model-collection"));

var _thread = _interopRequireDefault(require("./models/thread"));

var _contact = _interopRequireDefault(require("./models/contact"));

var _message = _interopRequireDefault(require("./models/message"));

var _draft = _interopRequireDefault(require("./models/draft"));

var _file = _interopRequireDefault(require("./models/file"));

var _calendar = _interopRequireDefault(require("./models/calendar"));

var _event = _interopRequireDefault(require("./models/event"));

var _delta = _interopRequireDefault(require("./models/delta"));

var _folder = require("./models/folder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PACKAGE_JSON = require('../package.json');

var SDK_VERSION = PACKAGE_JSON.version;
var SUPPORTED_API_VERSION = '2.0';

module.exports =
/*#__PURE__*/
function () {
  function NylasConnection(accessToken, _ref) {
    var clientId = _ref.clientId;

    _classCallCheck(this, NylasConnection);

    this.accessToken = accessToken;
    this.clientId = clientId;
    this.threads = new _restfulModelCollection.default(_thread.default, this);
    this.contacts = new _restfulModelCollection.default(_contact.default, this);
    this.messages = new _restfulModelCollection.default(_message.default, this);
    this.drafts = new _restfulModelCollection.default(_draft.default, this);
    this.files = new _restfulModelCollection.default(_file.default, this);
    this.calendars = new _restfulModelCollection.default(_calendar.default, this);
    this.events = new _restfulModelCollection.default(_event.default, this);
    this.deltas = new _delta.default(this);
    this.labels = new _restfulModelCollection.default(_folder.Label, this);
    this.folders = new _restfulModelCollection.default(_folder.Folder, this);
    this.account = new _restfulModelInstance.default(_account.default, this);
  }

  _createClass(NylasConnection, [{
    key: "requestOptions",
    value: function requestOptions(options) {
      if (!options) {
        options = {};
      }

      options = (0, _clone.default)(options);

      var Nylas = require('./nylas');

      if (!options.method) {
        options.method = 'GET';
      }

      if (options.path) {
        if (!options.url) {
          options.url = "".concat(Nylas.apiServer).concat(options.path);
        }
      }

      if (!options.formData) {
        if (!options.body) {
          options.body = {};
        }
      }

      if (options.json == null) {
        options.json = true;
      }

      if (!options.downloadRequest) {
        options.downloadRequest = false;
      } // For convenience, If `expanded` param is provided, convert to view:
      // 'expanded' api option


      if (options.qs && options.qs.expanded) {
        if (options.qs.expanded === true) {
          options.qs.view = 'expanded';
        }

        delete options.qs.expanded;
      }

      var user = options.path.substr(0, 3) === '/a/' ? Nylas.appSecret : this.accessToken;

      if (user) {
        options.auth = {
          user: user,
          pass: '',
          sendImmediately: true
        };
      }

      if (options.headers == null) {
        options.headers = {};
      }

      if (options.headers['User-Agent'] == null) {
        options.headers['User-Agent'] = "Nylas Node SDK v".concat(SDK_VERSION);
      }

      options.headers['Nylas-SDK-API-Version'] = SUPPORTED_API_VERSION;
      options.headers['X-Nylas-Client-Id'] = this.clientId;
      return options;
    }
  }, {
    key: "_getWarningForVersion",
    value: function _getWarningForVersion() {
      var sdkApiVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var apiVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var warning = '';

      if (sdkApiVersion != apiVersion) {
        if (sdkApiVersion && apiVersion) {
          warning += "WARNING: SDK version may not support your Nylas API version." + " SDK supports version ".concat(sdkApiVersion, " of the API and your application") + " is currently running on version ".concat(apiVersion, " of the API.");
          var apiNum = parseInt(apiVersion.split('-')[0]);
          var sdkNum = parseInt(sdkApiVersion.split('-')[0]);

          if (sdkNum > apiNum) {
            warning += " Please update the version of the API that your application is using through the developer dashboard.";
          } else if (apiNum > sdkNum) {
            warning += " Please update the sdk to ensure it works properly.";
          }
        }
      }

      return warning;
    }
  }, {
    key: "request",
    value: function request(options) {
      var _this = this;

      if (!options) {
        options = {};
      }

      options = this.requestOptions(options);
      return new Promise(function (resolve, reject) {
        return (0, _request2.default)(options, function (error, response) {
          var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          // node headers are lowercase so this refers to `Nylas-Api-Version`
          var apiVersion = response.headers['nylas-api-version'];

          var warning = _this._getWarningForVersion(SUPPORTED_API_VERSION, apiVersion);

          if (warning) {
            console.warn(warning);
          } // raw MIMI emails have json === false and the body is a string so
          // we need to turn into JSON before we can access fields


          if (options.json === false) {
            body = JSON.parse(body);
          }

          if (error || response.statusCode > 299) {
            if (!error) {
              error = new Error(body.message);
            }

            if (body.server_error) {
              error.message = "".concat(error.message, " (Server Error: ").concat(body.server_error, ")");
            }

            if (response.statusCode) {
              error.statusCode = response.statusCode;
            }

            return reject(error);
          } else {
            if (options.downloadRequest) {
              return resolve(response);
            } else {
              return resolve(body);
            }
          }
        });
      });
    }
  }]);

  return NylasConnection;
}();