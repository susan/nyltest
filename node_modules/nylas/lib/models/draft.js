"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _file = _interopRequireDefault(require("./file"));

var _message = _interopRequireDefault(require("./message"));

var _contact = _interopRequireDefault(require("./contact"));

var _attributes = _interopRequireDefault(require("./attributes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Draft =
/*#__PURE__*/
function (_Message) {
  _inherits(Draft, _Message);

  function Draft() {
    var _getPrototypeOf2;

    _classCallCheck(this, Draft);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Draft)).call.apply(_getPrototypeOf2, [this].concat(args)));
  }

  _createClass(Draft, [{
    key: "toJSON",
    value: function toJSON() {
      if (this.rawMime) {
        throw Error('toJSON() cannot be called for raw MIME drafts');
      }

      var json = _get(_getPrototypeOf(Draft.prototype), "toJSON", this).apply(this, arguments);

      json.file_ids = this.fileIds();

      if (this.draft) {
        json.object = 'draft';
      }

      return json;
    }
  }, {
    key: "save",
    value: function save() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (this.rawMime) {
        var err = new Error('save() cannot be called for raw MIME drafts');

        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      }

      return this._save(params, callback);
    }
  }, {
    key: "saveRequestBody",
    value: function saveRequestBody() {
      if (this.rawMime) {
        throw Error('saveRequestBody() cannot be called for raw MIME drafts');
      }

      return _get(_getPrototypeOf(Draft.prototype), "saveRequestBody", this).apply(this, arguments);
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.rawMime) {
        throw Error('toString() cannot be called for raw MIME drafts');
      }

      _get(_getPrototypeOf(Draft.prototype), "toString", this).call(this);
    }
  }, {
    key: "send",
    value: function send() {
      var _this = this;

      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var tracking = arguments.length > 1 ? arguments[1] : undefined;
      var body = this.rawMime,
          headers = {
        'Content-Type': 'message/rfc822'
      },
          json = false;

      if (!this.rawMime) {
        headers = {};
        json = true;

        if (this.id) {
          body = {
            draft_id: this.id,
            version: this.version
          };
        } else {
          body = this.saveRequestBody();

          if (tracking) {
            body['tracking'] = tracking;
          }
        }
      }

      return this.connection.request({
        method: 'POST',
        path: '/send',
        headers: headers,
        body: body,
        json: json
      }).then(function (json) {
        var message = new _message.default(_this.connection, json); // We may get failures for a partial send

        if (json.failures) {
          message.failures = json.failures;
        }

        if (callback) {
          callback(null, message);
        }

        return Promise.resolve(message);
      }).catch(function (err) {
        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      });
    }
  }]);

  return Draft;
}(_message.default);

exports.default = Draft;
Draft.collectionName = 'drafts';
Draft.attributes = _objectSpread({}, _message.default.attributes, {
  version: _attributes.default.Number({
    modelKey: 'version'
  }),
  replyToMessageId: _attributes.default.String({
    modelKey: 'replyToMessageId',
    jsonKey: 'reply_to_message_id'
  })
});