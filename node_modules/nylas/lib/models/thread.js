"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _message = _interopRequireDefault(require("./message"));

var _restfulModel = _interopRequireDefault(require("./restful-model"));

var _contact = _interopRequireDefault(require("./contact"));

var Attributes = _interopRequireWildcard(require("./attributes"));

var _folder = require("./folder");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Thread =
/*#__PURE__*/
function (_RestfulModel) {
  _inherits(Thread, _RestfulModel);

  function Thread() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Thread);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Thread)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.fromJSON = _this.fromJSON.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Thread, [{
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(Thread.prototype), "fromJSON", this).call(this, json);

      return this;
    }
  }, {
    key: "saveRequestBody",
    value: function saveRequestBody() {
      var json = {};

      if (this.labels) {
        json['label_ids'] = this.labels.map(function (label) {
          return label.id;
        });
      } else if (this.folder) {
        json['folder_id'] = this.folder.id;
      }

      json['starred'] = this.starred;
      json['unread'] = this.unread;
      return json;
    }
  }, {
    key: "save",
    value: function save() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this._save(params, callback);
    }
  }]);

  return Thread;
}(_restfulModel.default);

exports.default = Thread;
Thread.collectionName = 'threads';
Thread.attributes = _objectSpread({}, _restfulModel.default.attributes, {
  subject: Attributes.String({
    modelKey: 'subject'
  }),
  participants: Attributes.Collection({
    modelKey: 'participants',
    itemClass: _contact.default
  }),
  lastMessageTimestamp: Attributes.DateTime({
    modelKey: 'lastMessageTimestamp',
    jsonKey: 'last_message_timestamp'
  }),
  lastMessageReceivedTimestamp: Attributes.DateTime({
    modelKey: 'lastMessageReceivedTimestamp',
    jsonKey: 'last_message_received_timestamp'
  }),
  lastMessageSentTimestamp: Attributes.DateTime({
    modelKey: 'lastMessageSentTimestamp',
    jsonKey: 'last_message_sent_timestamp'
  }),
  firstMessageTimestamp: Attributes.DateTime({
    modelKey: 'firstMessageTimestamp',
    jsonKey: 'first_message_timestamp'
  }),
  snippet: Attributes.String({
    modelKey: 'snippet'
  }),
  unread: Attributes.Boolean({
    modelKey: 'unread'
  }),
  starred: Attributes.Boolean({
    modelKey: 'starred'
  }),
  hasAttachments: Attributes.Boolean({
    modelKey: 'has_attachments'
  }),
  version: Attributes.String({
    modelKey: 'version',
    jsonKey: 'version'
  }),
  folder: Attributes.Object({
    modelKey: 'folder',
    itemClass: _folder.Folder,
    jsonKey: 'folders'
  }),
  labels: Attributes.Collection({
    modelKey: 'labels',
    itemClass: _folder.Label,
    jsonKey: 'labels'
  }),
  messageIds: Attributes.StringList({
    modelKey: 'messageIds',
    jsonKey: 'message_ids'
  }),
  draftIds: Attributes.StringList({
    modelKey: 'draftIds',
    jsonKey: 'draft_ids'
  }),
  messages: Attributes.Collection({
    modelKey: 'messages',
    itemClass: _message.default
  }),
  drafts: Attributes.Collection({
    modelKey: 'drafts',
    itemClass: _message.default
  })
});