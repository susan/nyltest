"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _union = _interopRequireDefault(require("lodash/union"));

var _restfulModel = _interopRequireDefault(require("./restful-model"));

var _attributes = _interopRequireDefault(require("./attributes"));

var _file = _interopRequireDefault(require("./file"));

var _event = _interopRequireDefault(require("./event"));

var _emailParticipant = _interopRequireDefault(require("./email-participant"));

var _folder = require("./folder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Message =
/*#__PURE__*/
function (_RestfulModel) {
  _inherits(Message, _RestfulModel);

  function Message() {
    var _this;

    _classCallCheck(this, Message);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).apply(this, arguments));

    if (!_this.body) {
      _this.body = '';
    }

    if (!_this.subject) {
      _this.subject = '';
    }

    if (!_this.to) {
      _this.to = [];
    }

    if (!_this.cc) {
      _this.cc = [];
    }

    if (!_this.bcc) {
      _this.bcc = [];
    }

    return _this;
  } // We calculate the list of participants instead of grabbing it from
  // a parent because it is a better source of ground truth, and saves us
  // from more dependencies.


  _createClass(Message, [{
    key: "participants",
    value: function participants() {
      var participants = {};
      var contacts = (0, _union.default)(this.to, this.cc, this.from);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = contacts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var contact = _step.value;

          if (contact && (contact.email ? contact.email.length : undefined) > 0) {
            if (contact) {
              participants["".concat(((contact ? contact.email : undefined) != null ? contact ? contact.email : undefined : '').toLowerCase().trim(), " ").concat(((contact ? contact.name : undefined) != null ? contact ? contact.name : undefined : '').toLowerCase().trim())] = contact;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _.values(participants);
    }
  }, {
    key: "fileIds",
    value: function fileIds() {
      return (this.files || []).map(function (file) {
        return file.id;
      });
    }
  }, {
    key: "getRaw",
    value: function getRaw() {
      return this.connection.request({
        method: 'GET',
        headers: {
          Accept: 'message/rfc822'
        },
        path: "/".concat(this.constructor.collectionName, "/").concat(this.id)
      }).catch(function (err) {
        return Promise.reject(err);
      });
    }
  }, {
    key: "saveRequestBody",
    value: function saveRequestBody() {
      // It's possible to update most of the fields of a draft.
      if (this.constructor.name === 'Draft') {
        return _get(_getPrototypeOf(Message.prototype), "saveRequestBody", this).apply(this, arguments);
      } // Messages are more limited, though.


      var json = {};

      if (this.labels) {
        json['label_ids'] = Array.from(this.labels).map(function (label) {
          return label.id;
        });
      } else if (this.folder) {
        json['folder_id'] = this.folder.id;
      }

      json['starred'] = this.starred;
      json['unread'] = this.unread;
      return json;
    }
  }, {
    key: "save",
    value: function save() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this._save(params, callback);
    }
  }]);

  return Message;
}(_restfulModel.default);

exports.default = Message;
Message.collectionName = 'messages';
Message.attributes = _objectSpread({}, _restfulModel.default.attributes, {
  subject: _attributes.default.String({
    modelKey: 'subject'
  }),
  from: _attributes.default.Collection({
    modelKey: 'from',
    itemClass: _emailParticipant.default
  }),
  replyTo: _attributes.default.Collection({
    modelKey: 'replyTo',
    jsonKey: 'reply_to',
    itemClass: _emailParticipant.default
  }),
  to: _attributes.default.Collection({
    modelKey: 'to',
    itemClass: _emailParticipant.default
  }),
  cc: _attributes.default.Collection({
    modelKey: 'cc',
    itemClass: _emailParticipant.default
  }),
  bcc: _attributes.default.Collection({
    modelKey: 'bcc',
    itemClass: _emailParticipant.default
  }),
  date: _attributes.default.DateTime({
    modelKey: 'date'
  }),
  threadId: _attributes.default.String({
    modelKey: 'threadId',
    jsonKey: 'thread_id'
  }),
  snippet: _attributes.default.String({
    modelKey: 'snippet'
  }),
  body: _attributes.default.String({
    modelKey: 'body'
  }),
  unread: _attributes.default.Boolean({
    modelKey: 'unread'
  }),
  starred: _attributes.default.Boolean({
    modelKey: 'starred'
  }),
  files: _attributes.default.Collection({
    modelKey: 'files',
    itemClass: _file.default
  }),
  events: _attributes.default.Collection({
    modelKey: 'events',
    itemClass: _event.default
  }),
  folder: _attributes.default.Object({
    modelKey: 'folder',
    itemClass: _folder.Folder
  }),
  labels: _attributes.default.Collection({
    modelKey: 'labels',
    itemClass: _folder.Label
  }),
  headers: _attributes.default.Object({
    modelKey: 'headers'
  })
});