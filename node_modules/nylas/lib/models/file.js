"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _restfulModel = _interopRequireDefault(require("./restful-model"));

var _attributes = _interopRequireDefault(require("./attributes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var File =
/*#__PURE__*/
function (_RestfulModel) {
  _inherits(File, _RestfulModel);

  function File() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, File);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(File)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.upload = _this.upload.bind(_assertThisInitialized(_this));
    _this.download = _this.download.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(File, [{
    key: "upload",
    value: function upload() {
      var _this2 = this;

      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!this.filename) {
        throw new Error('Please define a filename');
      }

      if (!this.data) {
        throw new Error('Please add some data to the file');
      }

      if (!this.contentType) {
        throw new Error('Please define a content-type');
      }

      return this.connection.request({
        method: 'POST',
        json: false,
        path: "/".concat(this.constructor.collectionName),
        formData: {
          file: {
            value: this.data,
            options: {
              filename: this.filename,
              contentType: this.contentType
            }
          }
        }
      }).then(function (json) {
        // The API returns a list of files. It should
        // always have a length of 1 since we only
        // upload file-by-file.
        if (json.length > 0) {
          _this2.fromJSON(json[0]);

          if (callback) {
            callback(null, _this2);
          }

          return Promise.resolve(_this2);
        } else {
          return Promise.reject(null);
        }
      }).catch(function (err) {
        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      });
    }
  }, {
    key: "download",
    value: function download() {
      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!this.id) {
        throw new Error('Please provide a File id');
      }

      return this.connection.request({
        path: "/files/".concat(this.id, "/download"),
        encoding: null,
        downloadRequest: true
      }).then(function (response) {
        var filename;

        var file = _objectSpread({}, response.headers, {
          body: response.body
        });

        if ('content-disposition' in file) {
          filename = /filename=([^;]*)/.exec(file['content-disposition'])[1] || 'filename';
        } else {
          filename = 'filename';
        }

        if (callback) {
          callback(null, file);
        }

        return Promise.resolve(file);
      }).catch(function (err) {
        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      });
    }
  }, {
    key: "metadata",
    value: function metadata() {
      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.connection.request({
        path: "/files/".concat(this.id)
      }).then(function (response) {
        if (callback) {
          callback(null, response);
        }

        return Promise.resolve(response);
      }).catch(function (err) {
        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      });
    }
  }]);

  return File;
}(_restfulModel.default);

exports.default = File;
File.collectionName = 'files';
File.attributes = _objectSpread({}, _restfulModel.default.attributes, {
  contentType: _attributes.default.String({
    modelKey: 'contentType',
    jsonKey: 'content_type'
  }),
  size: _attributes.default.Number({
    modelKey: 'size',
    jsonKey: 'size'
  }),
  filename: _attributes.default.String({
    modelKey: 'filename',
    jsonKey: 'filename'
  }),
  messageIds: _attributes.default.Collection({
    modelKey: 'messageIds',
    jsonKey: 'message_ids',
    itemClass: String
  }),
  contentId: _attributes.default.String({
    modelKey: 'contentId',
    jsonKey: 'content_id'
  }),
  contentDisposition: _attributes.default.String({
    modelKey: 'contentDisposition',
    jsonKey: 'content_disposition'
  })
});