"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var Attributes = _interopRequireWildcard(require("./attributes"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RestfulModel =
/*#__PURE__*/
function () {
  function RestfulModel(connection) {
    var json = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, RestfulModel);

    this.connection = connection;

    if (!(this.connection instanceof require('../nylas-connection'))) {
      throw new Error('Connection object not provided');
    }

    if (json) {
      this.fromJSON(json);
    }
  }

  _createClass(RestfulModel, [{
    key: "attributes",
    value: function attributes() {
      return this.constructor.attributes;
    }
  }, {
    key: "isEqual",
    value: function isEqual(other) {
      return (other ? other.id : undefined) === this.id && (other ? other.constructor : undefined) === this.constructor;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON() {
      var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var attributes = this.attributes();

      for (var attrName in attributes) {
        var attr = attributes[attrName];

        if (json[attr.jsonKey] !== undefined) {
          this[attrName] = attr.fromJSON(json[attr.jsonKey], this);
        }
      }

      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var json = {};
      var attributes = this.attributes();

      for (var attrName in attributes) {
        var attr = attributes[attrName];
        json[attr.jsonKey] = attr.toJSON(this[attrName]);
      }

      json['object'] = this.constructor.name.toLowerCase();
      return json;
    } // saveRequestBody is used by save(). It returns a JSON dict containing only the
    // fields the API allows updating. Subclasses should override this method.

  }, {
    key: "saveRequestBody",
    value: function saveRequestBody() {
      return this.toJSON();
    }
  }, {
    key: "toString",
    value: function toString() {
      return JSON.stringify(this.toJSON());
    } // Not every model needs to have a save function, but those who
    // do shouldn't have to reimplement the same boilerplate.
    // They should instead define a save() function which calls _save.

  }, {
    key: "_save",
    value: function _save() {
      var _this = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if ((0, _isFunction.default)(params)) {
        callback = params;
        params = {};
      }

      return this.connection.request({
        method: this.id ? 'PUT' : 'POST',
        body: this.saveRequestBody(),
        qs: params,
        path: this.id ? "/".concat(this.constructor.collectionName, "/").concat(this.id) : "/".concat(this.constructor.collectionName)
      }).then(function (json) {
        _this.fromJSON(json);

        if (callback) {
          callback(null, _this);
        }

        return Promise.resolve(_this);
      }).catch(function (err) {
        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      });
    }
  }, {
    key: "_get",
    value: function _get() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var path_suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      return this.connection.request({
        method: 'GET',
        path: "/".concat(this.constructor.collectionName, "/").concat(this.id).concat(path_suffix),
        qs: params
      }).then(function (response) {
        return Promise.resolve(response);
      });
    }
  }]);

  return RestfulModel;
}();

exports.default = RestfulModel;
RestfulModel.attributes = {
  id: Attributes.String({
    modelKey: 'id'
  }),
  object: Attributes.String({
    modelKey: 'object'
  }),
  accountId: Attributes.String({
    modelKey: 'accountId',
    jsonKey: 'account_id'
  })
};