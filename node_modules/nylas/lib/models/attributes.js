"use strict";

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// The Attribute class represents a single model attribute, like 'namespace_id'
// Subclasses of Attribute like AttributeDateTime know how to covert between
// the JSON representation of that type and the javascript representation.
// The Attribute class also exposes convenience methods for generating Matchers.
var Attribute =
/*#__PURE__*/
function () {
  function Attribute(_ref) {
    var modelKey = _ref.modelKey,
        jsonKey = _ref.jsonKey;

    _classCallCheck(this, Attribute);

    this.modelKey = modelKey;
    this.jsonKey = jsonKey || modelKey;
  }

  _createClass(Attribute, [{
    key: "toJSON",
    value: function toJSON(val) {
      return val;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      return val || null;
    }
  }]);

  return Attribute;
}();

var AttributeNumber =
/*#__PURE__*/
function (_Attribute) {
  _inherits(AttributeNumber, _Attribute);

  function AttributeNumber() {
    _classCallCheck(this, AttributeNumber);

    return _possibleConstructorReturn(this, _getPrototypeOf(AttributeNumber).apply(this, arguments));
  }

  _createClass(AttributeNumber, [{
    key: "toJSON",
    value: function toJSON(val) {
      return val;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      if (!isNaN(val)) {
        return Number(val);
      } else {
        return null;
      }
    }
  }]);

  return AttributeNumber;
}(Attribute);

var AttributeBoolean =
/*#__PURE__*/
function (_Attribute2) {
  _inherits(AttributeBoolean, _Attribute2);

  function AttributeBoolean() {
    _classCallCheck(this, AttributeBoolean);

    return _possibleConstructorReturn(this, _getPrototypeOf(AttributeBoolean).apply(this, arguments));
  }

  _createClass(AttributeBoolean, [{
    key: "toJSON",
    value: function toJSON(val) {
      return val;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      return val === 'true' || val === true || false;
    }
  }]);

  return AttributeBoolean;
}(Attribute);

var AttributeString =
/*#__PURE__*/
function (_Attribute3) {
  _inherits(AttributeString, _Attribute3);

  function AttributeString() {
    _classCallCheck(this, AttributeString);

    return _possibleConstructorReturn(this, _getPrototypeOf(AttributeString).apply(this, arguments));
  }

  _createClass(AttributeString, [{
    key: "toJSON",
    value: function toJSON(val) {
      return val;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      return val || '';
    }
  }]);

  return AttributeString;
}(Attribute);

var AttributeStringList =
/*#__PURE__*/
function (_Attribute4) {
  _inherits(AttributeStringList, _Attribute4);

  function AttributeStringList() {
    _classCallCheck(this, AttributeStringList);

    return _possibleConstructorReturn(this, _getPrototypeOf(AttributeStringList).apply(this, arguments));
  }

  _createClass(AttributeStringList, [{
    key: "toJSON",
    value: function toJSON(val) {
      return val;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      return val || [];
    }
  }]);

  return AttributeStringList;
}(Attribute);

var AttributeDate =
/*#__PURE__*/
function (_Attribute5) {
  _inherits(AttributeDate, _Attribute5);

  function AttributeDate() {
    _classCallCheck(this, AttributeDate);

    return _possibleConstructorReturn(this, _getPrototypeOf(AttributeDate).apply(this, arguments));
  }

  _createClass(AttributeDate, [{
    key: "toJSON",
    value: function toJSON(val) {
      if (!val) {
        return val;
      }

      if (!(val instanceof Date)) {
        throw new Error("Attempting to toJSON AttributeDate which is not a date: ".concat(this.modelKey, " = ").concat(val));
      }

      return val.toISOString();
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      if (!val) {
        return null;
      }

      return new Date(val);
    }
  }]);

  return AttributeDate;
}(Attribute);

var AttributeDateTime =
/*#__PURE__*/
function (_Attribute6) {
  _inherits(AttributeDateTime, _Attribute6);

  function AttributeDateTime() {
    _classCallCheck(this, AttributeDateTime);

    return _possibleConstructorReturn(this, _getPrototypeOf(AttributeDateTime).apply(this, arguments));
  }

  _createClass(AttributeDateTime, [{
    key: "toJSON",
    value: function toJSON(val) {
      if (!val) {
        return null;
      }

      if (!(val instanceof Date)) {
        throw new Error("Attempting to toJSON AttributeDateTime which is not a date: ".concat(this.modelKey, " = ").concat(val));
      }

      return val.getTime() / 1000.0;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(val, parent) {
      if (!val) {
        return null;
      }

      return new Date(val * 1000);
    }
  }]);

  return AttributeDateTime;
}(Attribute);

var AttributeCollection =
/*#__PURE__*/
function (_Attribute7) {
  _inherits(AttributeCollection, _Attribute7);

  function AttributeCollection(_ref2) {
    var _this;

    var modelKey = _ref2.modelKey,
        jsonKey = _ref2.jsonKey,
        itemClass = _ref2.itemClass;

    _classCallCheck(this, AttributeCollection);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributeCollection).apply(this, arguments));
    _this.itemClass = itemClass;
    return _this;
  }

  _createClass(AttributeCollection, [{
    key: "toJSON",
    value: function toJSON(vals) {
      if (!vals) {
        return [];
      }

      var json = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var val = _step.value;

          if (val.toJSON != null) {
            json.push(val.toJSON());
          } else {
            json.push(val);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return json;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json, parent) {
      if (!json || !(json instanceof Array)) {
        return [];
      }

      var objs = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = json[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var objJSON = _step2.value;
          var obj = new this.itemClass(parent.connection, objJSON);
          objs.push(obj);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return objs;
    }
  }]);

  return AttributeCollection;
}(Attribute);

module.exports = {
  Number: function Number() {
    return _construct(AttributeNumber, Array.prototype.slice.call(arguments));
  },
  String: function String() {
    return _construct(AttributeString, Array.prototype.slice.call(arguments));
  },
  StringList: function StringList() {
    return _construct(AttributeStringList, Array.prototype.slice.call(arguments));
  },
  DateTime: function DateTime() {
    return _construct(AttributeDateTime, Array.prototype.slice.call(arguments));
  },
  Date: function Date() {
    return _construct(AttributeDate, Array.prototype.slice.call(arguments));
  },
  Collection: function Collection() {
    return _construct(AttributeCollection, Array.prototype.slice.call(arguments));
  },
  Boolean: function Boolean() {
    return _construct(AttributeBoolean, Array.prototype.slice.call(arguments));
  },
  Object: function Object() {
    return _construct(Attribute, Array.prototype.slice.call(arguments));
  },
  AttributeNumber: AttributeNumber,
  AttributeString: AttributeString,
  AttributeStringList: AttributeStringList,
  AttributeDateTime: AttributeDateTime,
  AttributeCollection: AttributeCollection,
  AttributeBoolean: AttributeBoolean,
  AttributeDate: AttributeDate
};