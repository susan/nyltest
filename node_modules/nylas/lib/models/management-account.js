"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _managementModel = _interopRequireDefault(require("./management-model"));

var _attributes = _interopRequireDefault(require("./attributes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ManagementAccount =
/*#__PURE__*/
function (_ManagementModel) {
  _inherits(ManagementAccount, _ManagementModel);

  function ManagementAccount() {
    _classCallCheck(this, ManagementAccount);

    return _possibleConstructorReturn(this, _getPrototypeOf(ManagementAccount).apply(this, arguments));
  }

  _createClass(ManagementAccount, [{
    key: "upgrade",
    value: function upgrade() {
      return this.connection.request({
        method: 'POST',
        path: "/a/".concat(this.appId, "/").concat(this.constructor.collectionName, "/").concat(this.id, "/upgrade")
      }).catch(function (err) {
        return Promise.reject(err);
      });
    }
  }, {
    key: "downgrade",
    value: function downgrade() {
      return this.connection.request({
        method: 'POST',
        path: "/a/".concat(this.appId, "/").concat(this.constructor.collectionName, "/").concat(this.id, "/downgrade")
      }).catch(function (err) {
        return Promise.reject(err);
      });
    }
  }, {
    key: "revokeAll",
    value: function revokeAll(keep_access_token) {
      return this.connection.request({
        method: 'POST',
        path: "/a/".concat(this.appId, "/").concat(this.constructor.collectionName, "/").concat(this.id, "/revoke-all"),
        body: {
          keep_access_token: keep_access_token
        }
      }).catch(function (err) {
        return Promise.reject(err);
      });
    }
  }, {
    key: "ipAddresses",
    value: function ipAddresses() {
      return this.connection.request({
        method: 'GET',
        path: "/a/".concat(this.appId, "/ip_addresses")
      }).catch(function (err) {
        return Promise.reject(err);
      });
    }
  }]);

  return ManagementAccount;
}(_managementModel.default);

exports.default = ManagementAccount;
ManagementAccount.collectionName = 'accounts';
ManagementAccount.attributes = _objectSpread({}, _managementModel.default.attributes, {
  billingState: _attributes.default.String({
    modelKey: 'billingState',
    jsonKey: 'billing_state'
  }),
  emailAddress: _attributes.default.String({
    modelKey: 'emailAddress',
    jsonKey: 'email'
  }),
  namespaceId: _attributes.default.String({
    modelKey: 'namespaceId',
    jsonKey: 'namespace_id'
  }),
  provider: _attributes.default.String({
    modelKey: 'provider'
  }),
  syncState: _attributes.default.String({
    modelKey: 'syncState',
    jsonKey: 'sync_state'
  }),
  trial: _attributes.default.Boolean({
    modelKey: 'trial'
  })
});